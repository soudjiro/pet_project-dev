// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    const items = document.querySelectorAll('.list-group-item');
    items.forEach((item, index) => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(20px)';
        setTimeout(() => {
            item.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
            item.style.opacity = '1';
            item.style.transform = 'translateY(0)';
        }, 100 * index);
    });
});

document.addEventListener('DOMContentLoaded', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    document.querySelectorAll('[data-status-action]').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const taskItem = this.closest('.list-group-item');
            const url = this.href;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if (this.dataset.statusAction === 'complete') {
                taskItem.classList.add('task-completing');
            } else {
                taskItem.classList.add('task-activating');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–±–ª–µ—Å–∫–∞"
            taskItem.classList.add('status-change');
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                window.location.href = url;
            }, 400);
        });
    });
});



document.addEventListener('DOMContentLoaded', function() {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–¥–∞—á–∏
    function updateTaskUI(taskElement, data) {
        const taskContent = taskElement.querySelector('.task-content');
        const actionsContainer = taskElement.querySelector('.task-actions');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        taskElement.classList.toggle('completed', data.completed);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã
        let datesHtml = `–°–æ–∑–¥–∞–Ω–æ: ${taskContent.querySelector('.created-date').textContent.split('|')[0].trim()}`;
        
        if (data.completed) {
            datesHtml += ` | –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${data.completed_at}`;
        }
        
        if (data.is_edited) {
            datesHtml += ` | –ò–∑–º–µ–Ω–µ–Ω–æ: ${data.updated_at || ''}`;
        }
        
        taskContent.querySelector('.dates').innerHTML = datesHtml;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        actionsContainer.innerHTML = data.completed ? `
            <button class="btn btn-sm btn-warning reactivate-btn"
                    data-task-id="${taskElement.id.split('-')[1]}"
                    title="–í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ">
                ‚Ü©Ô∏è
            </button>
            <button class="btn btn-sm btn-outline-danger delete-btn"
                    data-task-id="${taskElement.id.split('-')[1]}"
                    title="–£–¥–∞–ª–∏—Ç—å">
                üóëÔ∏è
            </button>
        ` : `
            <button class="btn btn-sm btn-success complete-btn"
                    data-task-id="${taskElement.id.split('-')[1]}"
                    title="–ó–∞–≤–µ—Ä—à–∏—Ç—å">
                ‚úì
            </button>
            <a href="/edit/${taskElement.id.split('-')[1]}" 
               class="btn btn-sm btn-outline-primary"
               title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
               ‚úèÔ∏è
            </a>
            <button class="btn btn-sm btn-outline-danger delete-btn"
                    data-task-id="${taskElement.id.split('-')[1]}"
                    title="–£–¥–∞–ª–∏—Ç—å">
                üóëÔ∏è
            </button>
        `;
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        assignEventHandlers();
    }
    // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    function updateTask(taskId, action) {
        const taskElement = document.getElementById(`task-${taskId}`);
        const taskContent = taskElement.querySelector('.task-content');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if (action === 'complete') {
            taskElement.classList.add('completing');
        } else if (action === 'reactivate') {
            taskElement.classList.add('reactivating');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch(`/${action}/${taskId}`)
            .then(response => response.json())
            .then(data => {
                // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                setTimeout(() => {
                    taskElement.classList.remove('completing', 'reactivating');
                    
                    if (action === 'complete') {
                        taskElement.classList.add('completed');
                        taskContent.innerHTML += `
                            <small class="text-muted d-block">
                                –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}
                            </small>
                        `;
                        // –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
                        taskElement.querySelector('.task-actions').innerHTML = `
                            <button class="btn btn-sm btn-warning reactivate-btn"
                                    data-task-id="${taskId}"
                                    title="–í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ">
                                ‚Ü©Ô∏è
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-btn"
                                    data-task-id="${taskId}"
                                    title="–£–¥–∞–ª–∏—Ç—å">
                                üóëÔ∏è
                            </button>
                        `;
                    } else {
                        taskElement.classList.remove('completed');
                        // –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        const completedDate = taskContent.querySelector('small:last-child');
                        if (completedDate) completedDate.remove();
                        // –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
                        taskElement.querySelector('.task-actions').innerHTML = `
                            <button class="btn btn-sm btn-success complete-btn"
                                    data-task-id="${taskId}"
                                    title="–ó–∞–≤–µ—Ä—à–∏—Ç—å">
                                ‚úì
                            </button>
                            <a href="/edit/${taskId}" 
                               class="btn btn-sm btn-outline-primary"
                               title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                               ‚úèÔ∏è
                            </a>
                            <button class="btn btn-sm btn-outline-danger delete-btn"
                                    data-task-id="${taskId}"
                                    title="–£–¥–∞–ª–∏—Ç—å">
                                üóëÔ∏è
                            </button>
                        `;
                    }
                    
                    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                    assignEventHandlers();
                }, 300);
            })
            .catch(error => {
                console.error('Error:', error);
                taskElement.classList.remove('completing', 'reactivating');
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    function assignEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        document.querySelectorAll('.complete-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                updateTask(this.dataset.taskId, 'complete');
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        document.querySelectorAll('.reactivate-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                updateTask(this.dataset.taskId, 'reactivate');
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const taskId = this.dataset.taskId;
                const taskElement = document.getElementById(`task-${taskId}`);
                
                // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                taskElement.classList.add('deleting');
                
                fetch(`/delete/${taskId}`, { method: 'POST' })
                    .then(response => {
                        setTimeout(() => {
                            taskElement.remove();
                        }, 300);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        taskElement.classList.remove('deleting');
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.');
                    });
            });
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    assignEventHandlers();
});
