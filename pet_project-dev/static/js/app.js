document.addEventListener('DOMContentLoaded', function() {



    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    document.addEventListener('click', async function(e) {
        if (e.target.closest('.start-btn')) {
            e.preventDefault();
            const btn = e.target.closest('.start-btn');
            const taskId = btn.dataset.taskId;
            const taskElement = document.getElementById(`task-${taskId}`);
            
            taskElement.classList.add('task-starting');
            
            try {
                const response = await fetch(`/start/${taskId}`);
                const data = await response.json();
                
                if (data.status === 'success') {
                    taskElement.classList.add('task-deleting');
                    setTimeout(() => {
                        taskElement.remove();
                    }, 400);
                }
            } catch (error) {
                console.error('Error:', error);
                taskElement.classList.remove('task-starting');
            }
        }

        if (e.target.closest('.complete-btn')) {
            e.preventDefault();
            const btn = e.target.closest('.complete-btn');
            const taskId = btn.dataset.taskId;
            const taskElement = document.getElementById(`task-${taskId}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            taskElement.classList.add('task-completing');
            
            try {
                const response = await fetch(`/complete/${taskId}`);
                const data = await response.json();
                
                if (data.status === 'success') {
                    // –ü–ª–∞–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                    taskElement.classList.add('task-deleting');
                    setTimeout(() => {
                        taskElement.remove();
                    }, 400);
                }
            } catch (error) {
                console.error('Error:', error);
                taskElement.classList.remove('task-completing');
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ"
        if (e.target.closest('.reactivate-btn')) {
            e.preventDefault();
            const btn = e.target.closest('.reactivate-btn');
            const taskId = btn.dataset.taskId;
            const taskElement = document.getElementById(`task-${taskId}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            taskElement.classList.add('task-reactivate');
            
            try {
                const response = await fetch(`/reactivate/${taskId}`);
                const data = await response.json();
                
                if (data.status === 'success') {
                    // –ü–ª–∞–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                    taskElement.classList.add('task-deleting');
                    setTimeout(() => {
                        taskElement.remove();
                    }, 400);
                }
            } catch (error) {
                console.error('Error:', error);
                taskElement.classList.remove('task-reactivate');
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if (e.target.closest('.delete-btn')) {
            e.preventDefault();
            const btn = e.target.closest('.delete-btn');
            const taskId = btn.dataset.taskId;
            const taskElement = document.getElementById(`task-${taskId}`);
            
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
                taskElement.classList.add('task-deleting');
                
                try {
                    await fetch(`/delete/${taskId}`, { method: 'POST' });
                    setTimeout(() => {
                        taskElement.remove();
                    }, 400);
                } catch (error) {
                    console.error('Error:', error);
                    taskElement.classList.remove('task-deleting');
                }
            }
        }
    });


    const modal = document.getElementById("editModal");
    const closeBtn = document.querySelector(".close");
    const editForm = document.getElementById("editForm");

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.addEventListener('click', function(e) {
        if (e.target.closest('.edit-btn')) {
            const taskId = e.target.closest('button').dataset.taskId;
            const taskElement = document.getElementById(`task-${taskId}`);
            const taskText = taskElement.querySelector('.task-content').firstChild.textContent.trim();
            
            document.getElementById("editTaskId").value = taskId;
            document.getElementById("editTaskText").value = taskText;
            modal.style.display = "block";
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeBtn.onclick = function() {
        modal.style.display = "none";
    }

    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
editForm.onsubmit = async function(e) {
    e.preventDefault();
    const taskId = document.getElementById("editTaskId").value;
    const newText = document.getElementById("editTaskText").value.trim();
    const taskElement = document.getElementById(`task-${taskId}`);

    if (!newText) {
        alert('–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }

    try {
        const response = await fetch(`/edit/${taskId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `task=${encodeURIComponent(newText)}`
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            taskElement.querySelector('.task-content').firstChild.textContent = newText;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Å –¥–∞—Ç–∞–º–∏
            const datesElement = taskElement.querySelector('.dates');
            let datesHtml = `–°–æ–∑–¥–∞–Ω–æ: ${datesElement.textContent.split('–°–æ–∑–¥–∞–Ω–æ:')[1].split('|')[0].trim()}`;
            
            if (taskElement.classList.contains('completed')) {
                datesHtml += ` | –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${datesElement.textContent.split('–ó–∞–≤–µ—Ä—à–µ–Ω–æ:')[1].split('|')[0].trim()}`;
            }
            
            datesHtml += ` | –ò–∑–º–µ–Ω–µ–Ω–æ: ${data.updated_at}`;
            datesElement.innerHTML = datesHtml;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            taskElement.classList.add('updated-highlight');
            setTimeout(() => {
                taskElement.classList.remove('updated-highlight');
            }, 1000);
            
            modal.style.display = "none";
        } else if (data.message) {
            alert(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    }
};

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–¥–∞—á–∏
    function updateTaskUI(taskElement, data) {
        const taskContent = taskElement.querySelector('.task-content');
        const actionsContainer = taskElement.querySelector('.task-actions');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        taskElement.classList.toggle('completed', data.completed);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã
        let datesHtml = `–°–æ–∑–¥–∞–Ω–æ: ${new Date(data.created_at).toLocaleString('ru-RU')}`;
        
        if (data.completed_at) {
            datesHtml += ` | –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date(data.completed_at).toLocaleString('ru-RU')}`;
        }
        
        if (data.is_edited) {
            datesHtml += ` | –ò–∑–º–µ–Ω–µ–Ω–æ: ${new Date(data.updated_at).toLocaleString('ru-RU')}`;
        }
        
        taskContent.querySelector('.dates').innerHTML = datesHtml;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        actionsContainer.innerHTML = data.completed ? `
            <button class="btn btn-sm btn-warning reactivate-btn"
                    data-task-id="${data.id}"
                    title="–í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ">
                ‚Ü©Ô∏è
            </button>
            <button class="btn btn-sm btn-outline-danger delete-btn"
                    data-task-id="${data.id}"
                    title="–£–¥–∞–ª–∏—Ç—å">
                üóëÔ∏è
            </button>
        ` : `
            <button class="btn btn-sm btn-success complete-btn"
                    data-task-id="${data.id}"
                    title="–ó–∞–≤–µ—Ä—à–∏—Ç—å">
                ‚úì
            </button>
            <a href="/edit/${data.id}" 
               class="btn btn-sm btn-outline-primary"
               title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
               ‚úèÔ∏è
            </a>
            <button class="btn btn-sm btn-outline-danger delete-btn"
                    data-task-id="${data.id}"
                    title="–£–¥–∞–ª–∏—Ç—å">
                üóëÔ∏è
            </button>
        `;
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        assignEventHandlers();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
    function handleTaskAction(taskId, action) {
        const taskElement = document.getElementById(`task-${taskId}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        taskElement.classList.add(`task-${action}`);
        
        fetch(`/${action}/${taskId}`)
            .then(response => {
                if (!response.ok) throw new Error('Network error');
                return response.json();
            })
            .then(data => {
                setTimeout(() => {
                    taskElement.classList.remove(`task-${action}`);
                    if (action === 'delete') {
                        taskElement.remove();
                    } else {
                        updateTaskUI(taskElement, data);
                    }
                }, 300);
            })
            .catch(error => {
                console.error('Error:', error);
                taskElement.classList.remove(`task-${action}`);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            });
    }

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    function assignEventHandlers() {
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        document.addEventListener('click', function(e) {
            if (e.target.closest('.complete-btn')) {
                e.preventDefault();
                handleTaskAction(e.target.closest('button').dataset.taskId, 'complete');
            }
            
            // –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            if (e.target.closest('.reactivate-btn')) {
                e.preventDefault();
                handleTaskAction(e.target.closest('button').dataset.taskId, 'reactivate');
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ
            if (e.target.closest('.delete-btn')) {
                e.preventDefault();
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
                    handleTaskAction(e.target.closest('button').dataset.taskId, 'delete');
                }
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    assignEventHandlers();
});